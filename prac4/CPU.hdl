// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here 
    Decode(in=instruction,type=iA,a=aORm,c1=zx0,c2=nx0,c3=zy0,c4=ny0,c5=f0,c6=no0,d1=loadA,d2=loadD,d3=writeM,j1=j1out,j2=j2out,j3=j3out);
    Not(in=iA,out=niA);
    Mux16(a=tt,b=instruction,sel=niA,out=inA);
    Mux16(a=oA,b=inM,sel=aORm,out=oam);
    ARegister(in=inA,load=loadA,out=oA,out[0..14]=addressM);
    DRegister(in=tt,load=loadD,out=oD);
    ALU(x=oD,y=oam,zx=zx0,nx=nx0,zy=zy0,ny=ny0,f=f0,no=no0,out=tt,out=outM,zr=zr0,ng=ng0);
    Jump(j1=j1out,j2=j2out,j3=j3out,zr=zr0,ng=ng0,jump=loadPC);  
    PC(in=oA,load=loadPC,inc=true,reset=reset,out[0..14]=pc);
}